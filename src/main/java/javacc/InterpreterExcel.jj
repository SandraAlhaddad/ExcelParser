/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options
        {
        IGNORE_CASE = true;
        STATIC = false;
        }PARSER_BEGIN(InterpreterExcel)package javacc;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class InterpreterExcel{
  private static List<String> variables; // Store variables and their values
  private static HashMap<String,String> cells;
    public static void main(String args []) throws ParseException  {
        try {
       		variables = new ArrayList<String>();
       		cells = new HashMap<String,String>();
            InterpreterExcel parser = new InterpreterExcel(System.in);
            parser.parse();
            dumpVariables(); // Dump variables at the end of the run
        } catch (Exception e) {
            e.printStackTrace();
        }  }

  private static void dumpVariables() {
    System.out.println("Dumping variables:");
    for (String entry : variables) {
      System.out.println(entry);
    }
  }}PARSER_END(InterpreterExcel)SKIP: {
    " " | "\t" | "\n" | "\r"
}

// Define tokens
TOKEN : {
  <DECIMAL_LITERAL: ["1"-"9"](["0"-"9"])* >
| <FLOATING_POINT_LITERAL:
          (
            (["0"-"9"])+ "E"( "+" | "-" )?(["0"-"9"])+
            | "." (["0"-"9"])+ ( "E" ( "+" | "-" )? (["0"-"9"])+ )?
            | (["0"-"9"])+ "." (["0"-"9"])* ( "E" ( "+" | "-" )? (["0"-"9"])+ )?
          )
      >
| <STRING_LITERAL: "'" ( ~["'"] | "''" )* "'" >
| <TIMESTAMP_LITERAL: "{" ["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"] "-" ["0"-"9"]["0"-"9"] "-" ["0"-"9"]["0"-"9"] " " ["0"-"9"]["0"-"9"] ":" ["0"-"9"]["0"-"9"] ":" ["0"-"9"]["0"-"9"] "}" >
| <VARIABLE: ["i","j","k","l","m","n"] >
| <FORMATTED: "FORMATTED" >
| <FOR: "for" >
| <FROM: "from" >
| <TO: "to" >
| <DO: "do" >
| <END: "end" >
| <C: "C" >
| <R: "R" >
| <ASSIGNEMENT_OPERATOR: "=" >
| <STRING_CONCATENATION_OPERATOR: "&" >
| <COMPARISON_OPERATOR: "<" | "<=" | "==" | ">=" | ">" | "<>" >
| <FUNCTION_NAME: "function">
| <ADD: "+">
| <SUB: "-">
| <MOD: "%">
| <DIV: "/">
| <MUL: "*">
| <OPENPAR: "(">
| <CLOSEPAR: ")">
}

String expression() :
{
  String res;
  }
{
    LOOKAHEAD(20) res = variable()
   {
	return res;
	}
	| LOOKAHEAD(20) res = booleanExpression()
   {
	return res;
	}
//  | LOOKAHEAD(12) res = cellReference()
//  {
//	return res;
//	}
  | LOOKAHEAD(20) res = numberExpression() 
   {
	return res;
	}
  | LOOKAHEAD(20) res = functionReturningNumber() 
   {
	return res;
	}
//  | LOOKAHEAD(12) res = cellExpression()
//   {
//	return res;
//	}
//  | LOOKAHEAD(20) res = stringExpression()
//     {
//	return res;
//	}
  | LOOKAHEAD(20) res = timestampExpression()
       {
	return res;
	}
}

String numberExpression():
{
String res;
  } {
   res = differenceOfTimestamps()
  {
    return res;
  }
|  res = numberLiteral()
  {
//    System.out.println("nb expression");
    return res;
  }
}

String numberLiteral() :
{
String firstTerm = "";
String secondTerm = "";
String op = "";
String res = "";
Double dval = 0.0;
}
{
//	(
	  firstTerm = term()
	  
(	  op = <ADD>.image
    secondTerm = term()
     {
       	dval = Double.parseDouble(firstTerm);
	    firstTerm = String.valueOf(dval);
        Double firstTerm1 = Double.parseDouble(firstTerm);
        Double secondTerm1 = Double.parseDouble(secondTerm);
        firstTerm = String.valueOf(firstTerm1 + secondTerm1);
     }
    |	  op = <SUB>.image
    secondTerm = term()
     {
       	dval = Double.parseDouble(firstTerm);
	    firstTerm = String.valueOf(dval);
        Double firstTerm2 = Double.parseDouble(firstTerm);
        Double secondTerm2 = Double.parseDouble(secondTerm);
        firstTerm = String.valueOf(firstTerm2 - secondTerm2);
     }
   | op = <STRING_CONCATENATION_OPERATOR>.image
   secondTerm = term()

     {
       firstTerm = firstTerm + " " + secondTerm;
    	firstTerm = firstTerm.replace("\'", "");
      }    )*
      {
        return firstTerm;
    }
}

String term():
{
 String firstFactor = "";
 String secondFactor = "";
 String op = "";
 String res = "";
 }
 {
      firstFactor = factor()
    (
    op = <MUL>.image
    secondFactor = factor()
     {
        Double firstFactor1 = Double.parseDouble(firstFactor);
        Double secondFactor1 = Double.parseDouble(secondFactor);
        firstFactor = String.valueOf(firstFactor1 * secondFactor1);
     }
    |
    op = <DIV>.image
    secondFactor = factor()
     {
        Double firstFactor2 = Double.parseDouble(firstFactor);
        Double secondFactor2 = Double.parseDouble(secondFactor);
        firstFactor = String.valueOf(firstFactor2 / secondFactor2);
    }
    |
    op = <MOD>.image
    secondFactor = factor()
     {
        Double firstFactor3 = Double.parseDouble(firstFactor);
        Double secondFactor3 = Double.parseDouble(secondFactor);
        firstFactor = String.valueOf(firstFactor3 % secondFactor3);
    }
    )*
    {
    return firstFactor;
    }
}

String factor():
{
	String fac = "";
}
{
	LOOKAHEAD(3) fac = <DECIMAL_LITERAL>.image
	{
  	return fac;
  	 }
| 	LOOKAHEAD(3) fac = <FLOATING_POINT_LITERAL>.image
	{
		return fac;
	}
|   LOOKAHEAD(3) fac = cellReference()
{
		return fac;
}
|   LOOKAHEAD(3) fac = <STRING_LITERAL>.image
{
		return fac;
}
}

String functionReturningNumber() :
{
	String name;
	String a;
	String arg;
	String b;
	String res;
	String[] parts;
	Double[] n1;
	Double sum = 0.0;
  }
{
  name = <FUNCTION_NAME>.image
  a = "(".image
  arg = functionArguments()
  b = ")".image
  {
//	res = name + a + arg + b;
	parts = arg.split(",");
	n1 = new Double[parts.length];
	for(int n = 0; n < parts.length; n++) {
	   n1[n] = Double.parseDouble(parts[n]);
	   sum = sum + n1[n];
	}
	res = String.valueOf(sum);
	return res;
  }
}

String functionArguments() :
{
  String arguments = "";
  String comma = "";
  String arg = "";
  String res = "";
  }
{
	arguments = numberExpression()
	(
	  comma = ",".image
	  arg = numberExpression()		{
		  arguments = arguments + comma + arg;
		}
	)*
{
  return arguments;
}
}

String stringExpression() :
{
	String s = "";
	String amp = "";
	String expr = "";
	String res = "";
  }
{
  (    s = <STRING_LITERAL>.image
  | s = cellReference())
  [
	amp = "&".image
	expr = stringExpression() 
  ]

  {
    res = s + " " + expr;
    res = res.replace("\'", "");
    return res;
  }
}

String cellExpression() :
{
	String cell = "";
	String amp = "";
	String expr = "";
	String res = "";
  }
{
  cell = cellReference()
  [
	expr = expression()
  ]
//  (
//	amp = <STRING_CONCATENATION_OPERATOR>.image
//	expr = stringExpression()
//{
//	res = cell + " " + expr;
//	res = res.replace("\'", "");
//	return res;
//}
//| 	op = <ADD>.image
//	expr = numberExpression()  {
//		Double num = Double.
//	}
//
//| 	op = <SUB>.image
//	expr = numberExpression()
//)*
  {
	res = cell + " " + expr;
	res = res.replace("\'", "");
	return res;
  }
}

String variable() :
{
	String var = "";
	String val = "";
	String op = "";
	String expr = "";
	Double res = 0.0;
	String result = "";
	String var2 = "";
	String varop = "";
	String variables = "";
	Double valnum= 0.0;
  }
{
  var = <VARIABLE>.image
  {
    val = cells.get(var);
    if (val == null)
    	variables = "+" + var;
    else { 
		valnum = Double.parseDouble(val);
		res = valnum;
	}
  }
  (	  (	    op = "+".image
	  | op = "-".image)
	  (	    var2 = <VARIABLE>.image
	  {
//		variables = variables + op + var2;
		    val = cells.get(var2);
	    if (val == null)
	    	variables = variables + op + var2;
	    else { 
			valnum = Double.parseDouble(val);
			res = res + valnum;
		  }
		}
	| (		expr = numberExpression()
//	  | expr = cellReference()
)
	  {
		Double num = Double.parseDouble(expr);
		if (op.equals("+")) {
			res = res + num;
		} else if (op.equals("-")) {
			res = res - num;
		}
	  }))*
  {
	
    result = String.valueOf(res) + variables;
	return result;
  }
}

String timestampExpression() :
{
  String time;
  String op;
  String num;
  String res;
  LocalDateTime dateTime;
  int sec;
  }
{
  time = <TIMESTAMP_LITERAL>.image
  (    op = "+".image
    | op = "-".image
   )
  num = <DECIMAL_LITERAL>.image
  {
//	res = time + op + num;

	time = time.replace("{", "");
	time = time.replace("}", "");
    dateTime = LocalDateTime.parse(time, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    sec = Integer.parseInt(num);
    if (op == "-") {
      // Subtract offset seconds from the timestamp
      dateTime = dateTime.minusSeconds(sec);
    } else {
      // Add offset seconds to the timestamp
      dateTime = dateTime.plusSeconds(sec);
    }
    res = dateTime.toString();
	return res;
  }
}

String booleanExpression() :
{
  String expr1;
  Double e1;
  Double e2;
  String op;
  String expr2;
  String res = "";
  LocalDateTime dateTime1;
  LocalDateTime dateTime2;
  }
{
  LOOKAHEAD(3) expr1 = numberExpression() 
  op = <COMPARISON_OPERATOR>.image
  expr2 = numberExpression()
  {
//	res = expr1 + op + expr2;
	e1 = Double.parseDouble(expr1);
	e2 = Double.parseDouble(expr2);
	switch(op) {
	  case "<":
	  	if(e1 < e2) { 
	  		res = "true";
	  		break;
	 	}else { 
	  		res = "false";
	  		break;
		}
	  case "<=":
	  	if(e1 <= e2) {
			res = "true";
			break;
	  	}else {
			res = "false";
			break;
	  	}
	  case ">":
	  	if(e1 > e2) {
			res = "true";
			break;
	  	}else {
			res = "false";
			break;
	  	}
	  case ">=":
	  	if(e1 >= e2) {
			res = "true";
			break;
	  	}else {
			res = "false";
			break;
	  	}
	  case "==":
	  	if(e1 == e2) {
			res = "true";
			break;
	  	}else {
			res = "false";
			break;
	  	}
	  case "<>":
	  	if(e1 != e2) {
			res = "true";
			break;
	  	}else {
			res = "false";
			break;
	  	}
	default:
	  		res = "false";
	  		break;
	}
	return res;
  }

|   LOOKAHEAD(3) expr1 = stringExpression()
  op = <COMPARISON_OPERATOR>.image
  expr2 = stringExpression()
  {
	switch(op) {
            case "<":
                res = String.valueOf(expr1.compareTo(expr2) < 0);
                break;
            case "<=":
                res = String.valueOf(expr1.compareTo(expr2) <= 0);
                break;
            case "==":
                res = String.valueOf(expr1.compareTo(expr2) == 0);
                break;
            case ">=":
                res = String.valueOf(expr1.compareTo(expr2) >= 0);
                break;
            case ">":
                res = String.valueOf(expr1.compareTo(expr2) > 0);
                break;
            case "<>":
                res = String.valueOf(expr1.compareTo(expr2) != 0);
                break;
              }
	return res;
  }
  
|   LOOKAHEAD(3) expr1 = <TIMESTAMP_LITERAL>.image
  op = <COMPARISON_OPERATOR>.image
  expr2 = <TIMESTAMP_LITERAL>.image
  {
	expr1 = expr1.replace("{", "");
	expr1 = expr1.replace("}", "");
	expr2 = expr2.replace("{", "");
	expr2 = expr2.replace("}", "");
    dateTime1 = LocalDateTime.parse(expr1, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    dateTime2 = LocalDateTime.parse(expr2, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    int comparisonResult = dateTime1.compareTo(dateTime2);
    switch (op) {
      case "<":
      	if(comparisonResult < 0) { 
        	res = "True" ;
        	break;
       } else {
			res = "false";
			break;
       }
      case "<=":
      	if(comparisonResult <= 0) { 
        	res = "True" ;
        	break;
       } else {
			res = "false";
			break;
       }
      case "==":
      	if(comparisonResult == 0) { 
        	res = "True" ;
        	break;
       } else {
			res = "false";
			break;
       }
      case ">=":
      	if(comparisonResult >= 0) { 
        	res = "True" ;
        	break;
       } else {
			res = "false";
			break;
       }
      case ">":
      	if(comparisonResult > 0) { 
        	res = "True" ;
        	break;
       } else {
			res = "false";
			break;
       }
      case "<>":
      	if(comparisonResult != 0) { 
        	res = "True" ;
        	break;
       } else {
			res = "false";
			break;
       }
      default:
      	res = "false";
      	break;
     }
	return res;
  }
}

String cellReferenceWithVar() :
{
  String c;
  String exp1;
  String r;
  String exp2;
  String res;
  }
{
  c = <C>.image
  exp1 = Cexpr()
  r = <R>.image
  exp2 = Cexpr()
  {
    res = c + exp1 + r + exp2;
    return res;
  }
}

String cellReference() :
{
  String c;
  String exp1;
  String r;
  String exp2;
  String res;
  String cell;
  Double val1;
  Double val2;
  }
{
  <OPENPAR>
  c = <C>.image
  exp1 = numberExpression()
  {
    val1= Double.parseDouble(exp1);
  exp1=String.valueOf(val1);
  System.out.println("exp1 " + exp1); }
  r = <R>.image
  exp2 = numberExpression()
  {    val2= Double.parseDouble(exp2);
  exp2=String.valueOf(val2);
  System.out.println("exp2 " + exp2); }
  <CLOSEPAR>
  {
    
    cell = c + exp1 + r + exp2;
    System.out.println("cell " + cell);
	res = cells.get(cell);
	if (res == null)
		res = "0";
    return res;
  }
}

String Cexpr():
{
	String num = "";
	String op = "";
	String var = "";
	String dec = "";
	String res = "";
	Double dval = 0.0;
  }
{
	num = numberExpression()
//	{System.out.println("exp = " + num); }
//	num = factor()
//	(
//	  (
//	    op = "+".image
//		| op = "-".image
//		)
//	  var = <VARIABLE>.image
//	 )*

//	 (
//	   dec = <DECIMAL_LITERAL>.image
//	  )*

	  {
	    dval = Double.parseDouble(num);
	    res = String.valueOf(dval);
//	    System.out.println("res = " + res);
	    return res;
	  }
}

String differenceOfTimestamps() :
{
	String time1;
	String op;
	String time2;
	String res;
	LocalDateTime dateTime1;
	LocalDateTime dateTime2;
	Duration duration;
	long differenceInSeconds;
  }
{
	time1 = <TIMESTAMP_LITERAL>.image
	op = "-".image
	time2 = <TIMESTAMP_LITERAL>.image
	{
//	res = time1 + op + time2;
	time1 = time1.replace("{", "");
	time1 = time1.replace("}", "");
	time2 = time2.replace("{", "");
	time2 = time2.replace("}", "");
    dateTime1 = LocalDateTime.parse(time1, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    dateTime2 = LocalDateTime.parse(time2, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    duration = Duration.between(dateTime1, dateTime2);
    differenceInSeconds = duration.getSeconds();
    res = String.valueOf(differenceInSeconds);
	return res;
	}
}

void assignment() :
{
  String cell = "";
  String op = "";
  String exp = "";
  String format = "";
  String stexp = "";
  String res = "";
  String form = "";
  }
{
  (    cell = cellReferenceWithVar()
//	cell = cellReference()
  | cell = <VARIABLE>.image)
  op = <ASSIGNEMENT_OPERATOR>.image
  exp = expression()
  [
	format = <FORMATTED>.image
	stexp = stringExpression()
//	form = String.format(stexp, exp)
  ]
  {
    res = cell + op + exp + format + stexp;
//    System.out.println("cell = " + cell + " exp = " + exp);
	variables.add(res);
	cells.put(cell,exp);
  }
}

//////// assignment for loop
void forAssignment(int e1, int e2, String var) :
{
  String cell = "";
  String variable = "";
  String op = "";
  String exp = "";
  String format = "";
  String stexp = "";
  String res = "";
  String form = "";
  String cell1 = "";
  String result = "";
  }
{
  (
    cell = cellReferenceWithVar()
  | variable = <VARIABLE>.image)
  op = <ASSIGNEMENT_OPERATOR>.image
  exp = expression()
  [
	format = <FORMATTED>.image
	stexp = stringExpression()
//	form = String.format(stexp, exp)
  ]
  {
    for(int i = e1; i<= e2 ; i++) {
//      cells.put(var,"2");
//      result = expression()
      	if(!cell.equals("")) { 
	    	cell1 = forCellReferenceWithVar(cell,i);
	    	res = cell1 + op + exp + format + stexp;
	    	cells.put(cell1,exp);
	  	} else { 
	  		cell1 = variable;
	  		String expression = calculExp(exp, i);
	  		res = cell1 + op + expression + format + stexp;
	  		cells.put(cell1,expression);
		}
//	    res = cell1 + op + exp + format + stexp;
//	    System.out.println(res);
		variables.add(res);
	}
  }
}

String calculExp(String expr, int j):
{
  String expression;
  String res;
  String[] numbers;
  String[] operators;
  Double result;
  }
{
  {
  expression = expr.replaceAll("[A-Za-z]", String.valueOf(j));
  numbers = expression.split("[+-]");
  result = Double.parseDouble(numbers[0]);
  for (int i = 1; i < numbers.length; i++) {
      Double num = Double.parseDouble(numbers[i]);
      char operator = expression.charAt(numbers[i - 1].length());
      switch (operator) {
          case '+':
                result += num;
                break;
          case '-':
                result -= num;
                break;
          default:
			System.out.println("Invalid operator: " + operator);
            break;	
     }
    }
  res = String.valueOf(result);
  return res;
}
}

String forCellReferenceWithVar(String cell, int j) :
{
  int cIndex;
  int rIndex;
  String exp1;
  String exp2;
  String res1;
  String res2;
  String res;
  String[] numbers1;
  String[] operators1;
  String[] numbers2;
  String[] operators2;
  int result1;
  int result2;
  }
{
    {
  cIndex = cell.indexOf("C");
  rIndex = cell.indexOf("R");
  exp1 = cell.substring(cIndex + 1, rIndex).trim().replaceAll("[A-Za-z]", String.valueOf(j));
  numbers1 = exp1.split("[+-]");
  operators1 = exp1.split("\\d+");
  result1 = Integer.parseInt(numbers1[0]);
        
  for (int i = 1; i < numbers1.length; i++) {
            int num = Integer.parseInt(numbers1[i]);
            char operator = operators1[i].charAt(0);
            
            switch (operator) {
                case '+':
                    result1 += num;
                    break;
                case '-':
                    result1 -= num;
                    break;
                default:
                    System.out.println("Invalid operator: " + operator);
                    break;
                  }
    }
  res1 = String.valueOf(result1);
  exp2 = cell.substring(rIndex+1).trim().replaceAll("[A-Za-z]", String.valueOf(j));
  numbers2 = exp2.split("[+-]");
  operators2 = exp2.split("\\d+");
  result2 = Integer.parseInt(numbers2[0]);

  for (int i = 1; i < numbers2.length; i++) {
            int num = Integer.parseInt(numbers2[i]);
            char operator = operators2[i].charAt(0);
            
            switch (operator) {
                case '+':
                    result2 += num;
                    break;
                case '-':
                    result2 -= num;
                    break;
                default:
                    System.out.println("Invalid operator: " + operator);
                    break;
                  }
    }
    res2 = String.valueOf(result2);
    res = "C" + res1 + "R" + res2;
    return res;
  }
}

void forLoop() :
{
	String exp1;
	String exp2;
	int e1;
	int e2;
	String var;
  }
{
//    <FOR> <VARIABLE> <FROM> expression() <TO> expression() <DO> assignment() <END>
    <FOR>
    var = <VARIABLE>.image
    <FROM>
    exp1 = expression()
    <TO>
    exp2 = expression()
    <DO>
{
  	e1 = Integer.parseInt(exp1);
  	e2 = Integer.parseInt(exp2);
	forAssignment(e1, e2, var);
}
    <END>
}

void parse() :
{}
{
//    expression() (expression())* < EOF >
	(assignment() | forLoop())* <EOF>
}