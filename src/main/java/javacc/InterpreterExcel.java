/* Generated By:JavaCC: Do not edit this line. InterpreterExcel.java */
package javacc;

public class InterpreterExcel implements InterpreterExcelConstants {
  public static void main(String args []) throws ParseException
  {
        try {
            InterpreterExcel parser = new InterpreterExcel(System.in);
            parser.parse();
        } catch (Exception e) {
            e.printStackTrace();
        }
  }

  final public void expression() throws ParseException {
    numberExpression();
  }

  final public void numberExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION_NAME:
      functionReturningNumber();
      break;
    case TIMESTAMP_LITERAL:
      differenceOfTimestamps();
      break;
    case DECIMAL_LITERAL:
    case FLOATING_POINT_LITERAL:
      numberLiteral();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void numberLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
      jj_consume_token(DECIMAL_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void functionReturningNumber() throws ParseException {
    jj_consume_token(FUNCTION_NAME);
    jj_consume_token(25);
    functionArguments();
    jj_consume_token(26);
  }

  final public void functionArguments() throws ParseException {
    numberExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(27);
      numberExpression();
    }
  }

  final public void stringExpression() throws ParseException {
    jj_consume_token(STRING_LITERAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_CONCATENATION_OPERATOR:
      jj_consume_token(STRING_CONCATENATION_OPERATOR);
      stringExpression();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  final public void timestampExpression() throws ParseException {
    jj_consume_token(TIMESTAMP_LITERAL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 28:
      jj_consume_token(28);
      break;
    case 29:
      jj_consume_token(29);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    numberExpression();
  }

  final public void booleanExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
    case FLOATING_POINT_LITERAL:
    case TIMESTAMP_LITERAL:
    case FUNCTION_NAME:
      numberExpression();
      jj_consume_token(COMPARISON_OPERATOR);
      numberExpression();
      break;
    case STRING_LITERAL:
      stringExpression();
      jj_consume_token(COMPARISON_OPERATOR);
      stringExpression();
      break;
      timestampExpression();
      jj_consume_token(COMPARISON_OPERATOR);
      timestampExpression();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void cellReference() throws ParseException {
    jj_consume_token(C);
    numberExpression();
    jj_consume_token(R);
    numberExpression();
  }

  final public void differenceOfTimestamps() throws ParseException {
    jj_consume_token(TIMESTAMP_LITERAL);
    jj_consume_token(29);
    jj_consume_token(TIMESTAMP_LITERAL);
  }

  final public void assignment() throws ParseException {
    cellReference();
    jj_consume_token(ASSIGNEMENT_OPERATOR);
    expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FORMATTED:
      jj_consume_token(FORMATTED);
      stringExpression();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  final public void forLoop() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(VARIABLE);
    jj_consume_token(FROM);
    expression();
    jj_consume_token(TO);
    expression();
    jj_consume_token(DO);
    assignment();
    jj_consume_token(END);
  }

  final public void parse() throws ParseException {
    expression();
    jj_consume_token(0);
  }

  /** Generated Token Manager. */
  public InterpreterExcelTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200160,0x60,0x8000000,0x80000,0x30000000,0x2001e0,0x400,};
   }

  /** Constructor with InputStream. */
  public InterpreterExcel(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public InterpreterExcel(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new InterpreterExcelTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public InterpreterExcel(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new InterpreterExcelTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public InterpreterExcel(InterpreterExcelTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(InterpreterExcelTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
