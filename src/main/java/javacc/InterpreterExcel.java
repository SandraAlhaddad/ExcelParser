/* Generated By:JavaCC: Do not edit this line. InterpreterExcel.java */
package javacc;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class InterpreterExcel implements InterpreterExcelConstants {
  private static List<String> variables; // Store variables and their values
  private static HashMap<String,String> cells;

  public static void main(String args []) throws ParseException
  {
        try {
                variables = new ArrayList<String>();
                cells = new HashMap<String,String>();
            InterpreterExcel parser = new InterpreterExcel(System.in);
            parser.parse();
            dumpVariables(); // Dump variables at the end of the run
        } catch (Exception e) {
            e.printStackTrace();
        }
  }

  private static void dumpVariables() {
    System.out.println("Dumping variables:");
    for (String entry : variables) {
      System.out.println(entry);
    }
  }

  final public String expression() throws ParseException {
  String res;
    if (jj_2_1(6)) {
      res = booleanExpression();
        {if (true) return res;}
    } else if (jj_2_2(6)) {
      res = numberExpression();
        {if (true) return res;}
    } else if (jj_2_3(6)) {
      res = functionReturningNumber();
        {if (true) return res;}
    } else if (jj_2_4(6)) {
      res = stringAndCellExpression();
        {if (true) return res;}
    } else if (jj_2_5(6)) {
      res = stringExpression();
        {if (true) return res;}
    } else if (jj_2_6(6)) {
      res = timestampExpression();
        {if (true) return res;}
    } else if (jj_2_7(6)) {
      res = cellReference();
        {if (true) return res;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String numberExpression() throws ParseException {
String res;
    if (jj_2_8(3)) {
      res = differenceOfTimestamps();
    {if (true) return res;}
    } else if (jj_2_9(3)) {
      res = numberLiteral();
    {if (true) return res;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String numberLiteral() throws ParseException {
        Token t;
        String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL_LITERAL:
      t = jj_consume_token(DECIMAL_LITERAL);
        s = t.image;
        {if (true) return s;}
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
        s = t.image;
        {if (true) return s;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String functionReturningNumber() throws ParseException {
        String name;
        String a;
        String arg;
        String b;
        String res;
        String[] parts;
        int[] n1;
        int sum;
    sum = 0;
    name = jj_consume_token(FUNCTION_NAME).image;
    a = jj_consume_token(22).image;
    arg = functionArguments();
    b = jj_consume_token(23).image;
//	res = name + a + arg + b;
        parts = arg.split(",");
        n1 = new int[parts.length];
        for(int n = 0; n < parts.length; n++) {
           n1[n] = Integer.parseInt(parts[n]);
           sum = sum + n1[n];
        }
        res = String.valueOf(sum);
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public String functionArguments() throws ParseException {
  String arguments;
  String comma;
  String arg;
  String res;
    comma = "";
    arg = "";
    arguments = numberExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      comma = jj_consume_token(24).image;
      arg = numberExpression();
                  arguments = arguments + comma + arg;
    }
  {if (true) return arguments;}
    throw new Error("Missing return statement in function");
  }

  final public String stringExpression() throws ParseException {
        String s;
        String amp;
        String expr;
        String res;
    amp = "";
    expr= "";
    s = jj_consume_token(STRING_LITERAL).image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_CONCATENATION_OPERATOR:
      amp = jj_consume_token(STRING_CONCATENATION_OPERATOR).image;
      expr = stringExpression();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    res = s + " " + expr;
    res = res.replace("\u005c'", "");
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public String stringAndCellExpression() throws ParseException {
        String cell;
        String amp;
        String expr;
        String res;
    amp = "";
    expr = "";
    cell = cellReference();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_CONCATENATION_OPERATOR:
      amp = jj_consume_token(STRING_CONCATENATION_OPERATOR).image;
      expr = stringExpression();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
        res = cell + " " + expr;
        res = res.replace("\u005c'", "");
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public String timestampExpression() throws ParseException {
  String time;
  String op;
  String num;
  String res;
  LocalDateTime dateTime;
  int sec;
    time = jj_consume_token(TIMESTAMP_LITERAL).image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      op = jj_consume_token(25).image;
      break;
    case 26:
      op = jj_consume_token(26).image;
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    num = jj_consume_token(DECIMAL_LITERAL).image;
//	res = time + op + num;

        time = time.replace("{", "");
        time = time.replace("}", "");
    dateTime = LocalDateTime.parse(time, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    sec = Integer.parseInt(num);
    if (op == "-") {
      // Subtract offset seconds from the timestamp
      dateTime = dateTime.minusSeconds(sec);
    } else {
      // Add offset seconds to the timestamp
      dateTime = dateTime.plusSeconds(sec);
    }
    res = dateTime.toString();
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public String booleanExpression() throws ParseException {
  String expr1;
  int e1;
  int e2;
  String op;
  String expr2;
  String res;
  LocalDateTime dateTime1;
  LocalDateTime dateTime2;
    if (jj_2_10(3)) {
      expr1 = jj_consume_token(DECIMAL_LITERAL).image;
      op = jj_consume_token(COMPARISON_OPERATOR).image;
      expr2 = jj_consume_token(DECIMAL_LITERAL).image;
//	res = expr1 + op + expr2;
        e1 = Integer.parseInt(expr1);
        e2 = Integer.parseInt(expr2);
        switch(op) {
          case "<":
                if(e1 < e2) {
                        res = "true";
                        break;
                }else {
                        res = "false";
                        break;
                }
          case "<=":
                if(e1 <= e2) {
                        res = "true";
                        break;
                }else {
                        res = "false";
                        break;
                }
          case ">":
                if(e1 > e2) {
                        res = "true";
                        break;
                }else {
                        res = "false";
                        break;
                }
          case ">=":
                if(e1 >= e2) {
                        res = "true";
                        break;
                }else {
                        res = "false";
                        break;
                }
          case "==":
                if(e1 == e2) {
                        res = "true";
                        break;
                }else {
                        res = "false";
                        break;
                }
          case "<>":
                if(e1 != e2) {
                        res = "true";
                        break;
                }else {
                        res = "false";
                        break;
                }
        default:
                        res = "false";
                        break;
        }
        {if (true) return res;}
    } else if (jj_2_11(3)) {
      expr1 = stringExpression();
      op = jj_consume_token(COMPARISON_OPERATOR).image;
      expr2 = stringExpression();
//	res = expr1 + op + expr2;
        switch(op) {
          case "<":
                if(expr1.length() < expr2.length()) {
                        res = "true";
                        break;
                }else {
                        res = "false";
                        break;
                }
          case "<=":
                if(expr1.length() <= expr2.length()) {
                        res = "true";
                        break;
                }else {
                        res = "false";
                        break;
                }
          case ">":
                if(expr1.length() > expr2.length()) {
                        res = "true";
                        break;
                }else {
                        res = "false";
                        break;
                }
          case ">=":
                if(expr1.length() >= expr2.length()) {
                        res = "true";
                        break;
                }else {
                        res = "false";
                        break;
                }
          case "==":
                if(expr1.equals(expr2)) {
                        res = "true";
                        break;
                }else {
                        res = "false";
                        break;
                }
          case "<>":
                if(!expr1.equals(expr2)) {
                        res = "true";
                        break;
                }else {
                        res = "false";
                        break;
                }
        default:
                        res = "false";
                        break;
        }
        {if (true) return res;}
    } else if (jj_2_12(3)) {
      expr1 = jj_consume_token(TIMESTAMP_LITERAL).image;
      op = jj_consume_token(COMPARISON_OPERATOR).image;
      expr2 = jj_consume_token(TIMESTAMP_LITERAL).image;
//	res = expr1 + op + expr2;
        expr1 = expr1.replace("{", "");
        expr1 = expr1.replace("}", "");
        expr2 = expr2.replace("{", "");
        expr2 = expr2.replace("}", "");
    dateTime1 = LocalDateTime.parse(expr1, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    dateTime2 = LocalDateTime.parse(expr2, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    int comparisonResult = dateTime1.compareTo(dateTime2);
    switch (op) {
      case "<":
        if(comparisonResult < 0) {
                res = "True" ;
                break;
       } else {
                        res = "false";
                        break;
       }
      case "<=":
        if(comparisonResult <= 0) {
                res = "True" ;
                break;
       } else {
                        res = "false";
                        break;
       }
      case "==":
        if(comparisonResult == 0) {
                res = "True" ;
                break;
       } else {
                        res = "false";
                        break;
       }
      case ">=":
        if(comparisonResult >= 0) {
                res = "True" ;
                break;
       } else {
                        res = "false";
                        break;
       }
      case ">":
        if(comparisonResult > 0) {
                res = "True" ;
                break;
       } else {
                        res = "false";
                        break;
       }
      case "<>":
        if(comparisonResult != 0) {
                res = "True" ;
                break;
       } else {
                        res = "false";
                        break;
       }
      default:
        res = "false";
        break;
     }
        {if (true) return res;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String cellReferenceWithVar() throws ParseException {
  String c;
  String exp1;
  String r;
  String exp2;
  String res;
    c = jj_consume_token(C).image;
    exp1 = Cexpr();
    r = jj_consume_token(R).image;
    exp2 = Cexpr();
    res = c + exp1 + r + exp2;
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public String cellReference() throws ParseException {
  String c;
  String exp1;
  String r;
  String exp2;
  String res;
  String cell;
    c = jj_consume_token(C).image;
    exp1 = Cexpr();
    r = jj_consume_token(R).image;
    exp2 = Cexpr();
    cell = c + exp1 + r + exp2;
        res = cells.get(cell);
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public String Cexpr() throws ParseException {
        String num;
        String op;
        String var;
        String dec;
        String res;
    op = "";
    var ="";
    dec = "";
    num = numberExpression();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
      case 26:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        op = jj_consume_token(25).image;
        break;
      case 26:
        op = jj_consume_token(26).image;
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      var = jj_consume_token(VARIABLE).image;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL_LITERAL:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      dec = jj_consume_token(DECIMAL_LITERAL).image;
    }
            res = num + op + var + dec;
            {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public String differenceOfTimestamps() throws ParseException {
        String time1;
        String op;
        String time2;
        String res;
        LocalDateTime dateTime1;
        LocalDateTime dateTime2;
        Duration duration;
        long differenceInSeconds;
    time1 = jj_consume_token(TIMESTAMP_LITERAL).image;
    op = jj_consume_token(26).image;
    time2 = jj_consume_token(TIMESTAMP_LITERAL).image;
//	res = time1 + op + time2;
        time1 = time1.replace("{", "");
        time1 = time1.replace("}", "");
        time2 = time2.replace("{", "");
        time2 = time2.replace("}", "");
    dateTime1 = LocalDateTime.parse(time1, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    dateTime2 = LocalDateTime.parse(time2, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    duration = Duration.between(dateTime1, dateTime2);
    differenceInSeconds = duration.getSeconds();
    res = String.valueOf(differenceInSeconds);
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public void assignment() throws ParseException {
  String cell;
  String op;
  String exp;
  String format;
  String stexp;
  String res;
        format = "";
        stexp = "";
    cell = cellReferenceWithVar();
    op = jj_consume_token(ASSIGNEMENT_OPERATOR).image;
    exp = expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FORMATTED:
      format = jj_consume_token(FORMATTED).image;
      stexp = stringExpression();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    res = cell + op + exp + format + stexp;
        variables.add(res);
        cells.put(cell,exp);
  }

  final public void forLoop() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(VARIABLE);
    jj_consume_token(FROM);
    expression();
    jj_consume_token(TO);
    expression();
    jj_consume_token(DO);
    assignment();
    jj_consume_token(END);
  }

  final public void parse() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case C:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case C:
        assignment();
        break;
      case FOR:
        forLoop();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(STRING_CONCATENATION_OPERATOR)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(COMPARISON_OPERATOR)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(TIMESTAMP_LITERAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_6()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(5)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(TIMESTAMP_LITERAL)) return true;
    if (jj_scan_token(26)) return true;
    if (jj_scan_token(TIMESTAMP_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    if (jj_scan_token(COMPARISON_OPERATOR)) return true;
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(FUNCTION_NAME)) return true;
    if (jj_scan_token(22)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(23)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(STRING_CONCATENATION_OPERATOR)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(24)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(C)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(R)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(TIMESTAMP_LITERAL)) return true;
    if (jj_scan_token(COMPARISON_OPERATOR)) return true;
    if (jj_scan_token(TIMESTAMP_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_6()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public InterpreterExcelTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x60,0x1000000,0x80000,0x80000,0x6000000,0x6000000,0x6000000,0x20,0x400,0x10800,0x10800,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public InterpreterExcel(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public InterpreterExcel(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new InterpreterExcelTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public InterpreterExcel(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new InterpreterExcelTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public InterpreterExcel(InterpreterExcelTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(InterpreterExcelTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
