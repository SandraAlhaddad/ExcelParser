/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options
        {
        IGNORE_CASE = true;
        STATIC = false;
        }PARSER_BEGIN(InterpreterExcel)package javacc;

public class InterpreterExcel{  public static void main(String args []) throws ParseException  {        try {
            InterpreterExcel parser = new InterpreterExcel(System.in);
            parser.parse();
        } catch (Exception e) {
            e.printStackTrace();
        }  }}PARSER_END(InterpreterExcel)SKIP: {
    " " | "\t" | "\n" | "\r"
}

// Define tokens
TOKEN : {
  <DECIMAL_LITERAL: (["+","-"])?["1"-"9"](["0"-"9"])* >
| < FLOATING_POINT_LITERAL: ( "+" | "-" )?
          (
            (["0"-"9"])+ "E"( "+" | "-" )?(["0"-"9"])+
            | "\\." (["0"-"9"])+ ( "E" ( "+" | "-" )? (["0"-"9"])+ )?
            | (["0"-"9"])+ "\\." (["0"-"9"])* ( "E" ( "+" | "-" )? (["0"-"9"])+ )?
          )
      >
| <STRING_LITERAL: "'" ( ~["'"] | "''" )* "'" >
| <TIMESTAMP_LITERAL: "{" ["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"] "-" ["0"-"9"]["0"-"9"] "-" ["0"-"9"]["0"-"9"] " " ["0"-"9"]["0"-"9"] ":" ["0"-"9"]["0"-"9"] ":" ["0"-"9"]["0"-"9"] "}" >
| <VARIABLE: ["i","j","k","l","m","n"] >
| < FORMATTED: "FORMATTED" >
| < FOR: "for" >
| < FROM: "from" >
| < TO: "to" >
| < DO: "do" >
| < END: "end" >
| < C: "C" >
| < R: "R" >
| < ASSIGNEMENT_OPERATOR: "=" >
| < STRING_CONCATENATION_OPERATOR: "&" >
| < COMPARISON_OPERATOR: "<" | "<=" | "=" | ">=" | ">" | "<>" >
| < FUNCTION_NAME: (<LETTER>) (<ALPHANUM>)* >
| < DIGIT    : ["0"-"9"] >
| < LETTER   : ["a"-"z","A"-"Z"] >
| < ALPHANUM : <LETTER> | <DIGIT> >  
//| <CELL_REFERENCE: "C" <DECIMAL_LITERAL> "R" <DECIMAL_LITERAL>>
}

void expression() :
{}
{
  LOOKAHEAD(6) numberExpression()
  | LOOKAHEAD(6) stringExpression()
  | LOOKAHEAD(6) timestampExpression()
  | LOOKAHEAD(6) booleanExpression()
  | LOOKAHEAD(6) cellReference()
  | LOOKAHEAD(6) assignment()
  | LOOKAHEAD(6) forLoop() 
}

void numberExpression():
{} {
  LOOKAHEAD(3) functionReturningNumber() | LOOKAHEAD(3) differenceOfTimestamps() | LOOKAHEAD(3) numberLiteral()
}

void numberLiteral() :
{}
{
  <DECIMAL_LITERAL> | <FLOATING_POINT_LITERAL>
}

void functionReturningNumber() :
{}
{
  <FUNCTION_NAME> "(" functionArguments() ")"
}

void functionArguments() :
{}
{
  (numberExpression() ("," numberExpression())*)
}

void stringExpression() :
{}
{
  <STRING_LITERAL> ["&" stringExpression()]
}

void timestampExpression() :
{}
{
  <TIMESTAMP_LITERAL> ("+" | "-") numberExpression()
}

void booleanExpression() :
{}
{
  (	    LOOKAHEAD(3) numberExpression() <COMPARISON_OPERATOR> numberExpression()
	  | LOOKAHEAD(3) stringExpression() <COMPARISON_OPERATOR> stringExpression()
	  |  LOOKAHEAD(3) timestampExpression() <COMPARISON_OPERATOR> timestampExpression()
	)
//  (numberExpression() | stringExpression()| timestampExpression()) <COMPARISON_OPERATOR> (numberExpression() | stringExpression()  | timestampExpression())
}

void cellReference() :
{}
{
  <C> numberExpression() <R> numberExpression()
}

void differenceOfTimestamps() :
{}
{
    <TIMESTAMP_LITERAL> "-" <TIMESTAMP_LITERAL>
}

void assignment() :
{}
{
  cellReference() <ASSIGNEMENT_OPERATOR> expression() [<FORMATTED> stringExpression()]
}

void forLoop() :
{}
{
    <FOR> <VARIABLE> <FROM> expression() <TO> expression()
    <DO> assignment() <END>
}

void parse() :
{}
{
    expression() < EOF >
}
